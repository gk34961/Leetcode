class Solution {
    public boolean canPartition(int[] nums) {
        int sum=0;
        for(int n:nums)
            sum+=n;
        int target=sum/2;
        if(sum%2==1) return false;
        else return subsetSum(nums,target);
    }
    static boolean subsetSum(int nums[],int target){
        boolean[][] dp = new boolean[nums.length][target + 1];
        if(nums[0] <= target) dp[0][nums[0]] = true;
        
        for(int i = 0; i < nums.length; i++) dp[i][0] = true;
        
        for(int i = 1; i < dp.length; i++) {
            for(int j = 1; j < dp[0].length; j++) {
                if(j < nums[i]) {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i]];
                }
            }
        }
        return dp[dp.length - 1][dp[0].length - 1];
    } 
}

********LITTLE CHANGE***********
class Solution {
    public boolean canPartition(int[] nums) {
        int sum=0;
        for(int n:nums)
            sum+=n;
        
        if(sum%2==1) return false;
        else return subsetSum(nums,sum/2);
    }
    static boolean subsetSum(int arr[],int sum){
        boolean t[][] = new boolean[arr.length + 1][sum + 1];
		for (int i = 0; i <= arr.length; i++)
			for (int j = 0; j <= sum; j++) {
				if (i == 0)
					t[i][j] = false;
				if (j == 0)
					t[i][j] = true;
			}
		for (int i = 1; i <= arr.length; i++) {
			
			for (int j = 1; j <= sum; j++) {
				if (arr[i - 1] <= j)
					t[i][j] = t[i-1][j - arr[i - 1]] || t[i - 1][j];
				else
					t[i][j] = t[i - 1][j];
				
			}
		}
		return t[arr.length][sum];
    }
    
}
