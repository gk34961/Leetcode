/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        if (head == null || head.next == null) return true;
        ListNode midNode=mid(head);
        ListNode prev=reverse(midNode);
        
        while(head!=midNode){
            //System.out.println("head=="+head.val+"   "+"prev==="+prev.val);
            if(head.val!=prev.val) return false;
            head=head.next;
            prev=prev.next;
        }
        return true;
    }
    ListNode reverse(ListNode node){
        ListNode current=node;
        ListNode next=null;
        ListNode prev=null;
        
        while(current!=null){
            next=current.next;
            current.next=prev;
            prev=current;
            current=next;
        }
        return prev;
    }
    ListNode mid(ListNode node){
        ListNode fast=node;
        ListNode slow=node;
        
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
}
