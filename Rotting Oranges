class Solution {
    public int orangesRotting(int[][] grid) {
        int row=grid.length;
        int col=grid[0].length;

        Queue<int[]> queue=new LinkedList<>();
        int fresh=0;
        int t=0;
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(grid[i][j]==2) queue.offer(new int[]{i,j});
                else if(grid[i][j]==1) ++fresh;
            }
        }
        
        while(!queue.isEmpty()){
            int size=queue.size();
            
          for(int l=0;l<size;l++){ 
            int[] temp=queue.poll();
            int i=temp[0];
            int j=temp[1];
            if(checkvalid(i+1,j,row,col) && (grid[i+1][j]!=0 && grid[i+1][j]!=2 )){
                grid[i+1][j]=2;
                fresh--;
                queue.offer(new int[]{i+1,j});
            }
            if(checkvalid(i-1,j,row,col) && (grid[i-1][j]!=0 && grid[i-1][j]!=2)){
                grid[i-1][j]=2;
                fresh--;
                queue.offer(new int[]{i-1,j});
            }
            if(checkvalid(i,j+1,row,col) && (grid[i][j+1]!=0 && grid[i][j+1]!=2 )){
                grid[i][j+1]=2;
                fresh--;
                queue.offer(new int[]{i,j+1});
                
            }
            if(checkvalid(i,j-1,row,col) && (grid[i][j-1]!=0 && grid[i][j-1]!=2 )){
                grid[i][j-1]=2;
                fresh--;
                queue.offer(new int[]{i,j-1});
            }
          }
            if(!queue.isEmpty()) t++;
    }
        return (fresh==0)?t:-1;
}
    boolean checkvalid(int i,int j,int row,int col){
        if(i<0||j<0||i>=row||j>=col)return false;
        return true;
    }
}
