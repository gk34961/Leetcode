class Solution
{
   //Function to return list containing vertices in Topological order. 
  static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
   {
       int ans[] = new int[V];
       Stack<Integer> s = new Stack<>();
       boolean visited[] = new boolean[V];
       
       for(int j = 0 ; j < V; j++)
           if(!visited[j])
                dfs(adj, j, s, visited);
       
       int i=0;
       while(!s.isEmpty()){
           ans[i++] = s.pop();
           System.out.println(ans[i-1]);
       }

       return ans;
   }
   
   public static void dfs(ArrayList<ArrayList<Integer>> adj, int u, Stack<Integer> s, boolean visited[])
   {
       visited[u] = true;
       for(int x : adj.get(u)){
           if(!visited[x])
               dfs(adj, x, s, visited);
       }
     s.push(u); //Add vertex coz all verticed are visited(Bottom to up)
   }
   
}
