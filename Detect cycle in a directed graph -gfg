class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        boolean visited[]=new boolean[V];
        boolean isVisited[]=new boolean[V];
        
        for(int i=0;i<V;i++){
            if(!visited[i])
                if(dfs(i,adj,visited,isVisited)) return true;
        }
        return false;
    }
    
    boolean dfs(int i,ArrayList<ArrayList<Integer>> adj,boolean visited[],boolean isVisited[]){
        visited[i]=isVisited[i]=true;
        for(int node:adj.get(i)){
            if(!visited[node]){
                if(dfs(node,adj,visited,isVisited)) return true;
            }else if(visited[node]==true&&isVisited[node]==true) return true;
        }
        isVisited[i]=false;
        return false;
    }
}
