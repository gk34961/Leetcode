
class Solution
{
    int search(int A[], int l, int h, int key)
    {
        int midp=MinIndex(A,A.length);
        int left=binarySearch(A,0,midp-1,key);
        int right=binarySearch(A,midp,A.length-1,key);
        return Math.max(left,right);
    }
    int binarySearch(int arr[],int start,int end,int key){
        while(start<=end){
            int mid=start+(end-start)/2;
            if(arr[mid]==key) return mid;
            else if(arr[mid]<key) start=mid+1;
            else end=mid-1;
        }
        return -1;
    }
    int MinIndex(int arr[], int n)
    {
      int low =0 , high = n-1; 
      while(low<=high){
          int mid = low + (high-low)/2 ; 
          int prev = (mid-1 + n)  %n , next = (mid+1)%n ;
          if(arr[mid]<=arr[prev] && arr[mid]<=arr[next]) return mid;
          else if (arr[mid]<=arr[high]) high = mid-1 ; 
          else if (arr[mid]>=arr[low])  low=mid+1 ; 
      }
      return -1; 
   }
}
