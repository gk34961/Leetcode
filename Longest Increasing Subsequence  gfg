class Solution 
{
    //Function to find length of longest increasing subsequence.
    static int longestSubsequence(int size, int a[])
    {
        // code here
        int result[]=new int[size];
        for(int i=0;i<size;i++) result[i]=1;
        
        int i=0;
        int j=1;
        int max=0;
        while(j<size){
            if(a[i]<a[j] && i<j) {
                result[j]=Math.max(result[i]+1,result[j]);
                max=Math.max(max,result[j]);
                i++;
            }else if(i==j){
                j++;//1,2,2,
                i=0;
            }else
            i++;
        }
       return max; 
    }
} 

=================================================================================================================================================================================
TABULATION
=================================================================================================================================================================================
class Solution 
{
    //Function to find length of longest increasing subsequence.
    static int longestSubsequence(int size, int a[])
    {
        // code here
        if(size<=1) return a[0];
        int dp[]=new int[size];
        Arrays.fill(dp,1);
        int max=-1;
        
        for(int i=1;i<size;i++){
            for(int j=0;j<i;j++)
                if(a[j]<a[i]) dp[i]=Math.max(dp[i],dp[j]+1);
            max=Math.max(max,dp[i]);
        }
        return max;
    }
} 
