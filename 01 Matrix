//Class Solution
class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int row= mat.length;
        int col= mat[0].length;
        Queue<int[]> queue =new LinkedList<>();
        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(mat[i][j]==0)
                    queue.offer(new int[]{i,j});
                else
                    mat[i][j]=-1;
            }
        }
        while(!queue.isEmpty()){
            int[] temp=queue.poll();
            int i=temp[0];
            int j=temp[1];
            
            //check for neighbours
            if(checkvalid(i+1,j,row,col) && mat[i+1][j]==-1 ){
                queue.offer(new int[]{i+1,j});
                mat[i+1][j]=mat[i][j]+1;
            }
            if(checkvalid(i-1,j,row,col) && mat[i-1][j]==-1 ){
                queue.offer(new int[]{i-1,j});
                mat[i-1][j]=mat[i][j]+1;
            }
            if(checkvalid(i,j+1,row,col) && mat[i][j+1]==-1 ){
                queue.offer(new int[]{i,j+1});
                mat[i][j+1]=mat[i][j]+1;
                
            }
            if(checkvalid(i,j-1,row,col) && mat[i][j-1]==-1 ){
                queue.offer(new int[]{i,j-1});
                mat[i][j-1]=mat[i][j]+1;
            }
        }
return mat;
    }
    //Validate 
    boolean checkvalid(int i,int j,int row,int col){
        if(i<0||j<0||i>=row||j>=col)return false;
        return true;
    }
}

=======================================================================================================================================================================
class Solution {
    public int[][] updateMatrix(int[][] mat) {
        
        Queue<int[]> q=new LinkedList<>();
        for(int i=0;i<mat.length;i++){
            for(int j=0;j<mat[0].length;j++){
                if(mat[i][j]==0)
                    q.offer(new int[]{i,j});
                else
                   mat[i][j] =Integer.MAX_VALUE;
            }
        }
    
        int direction[][]={{-1,0},{0,-1},{1,0},{0,1}};
        
       
        while(!q.isEmpty()){
            int pos[]=q.poll();
            int x=pos[0];
            int y=pos[1];
            
            for(int dir[]:direction){
                int newx=dir[0]+x;
                int newy=dir[1]+y;
                
                if(isValid(x,y,newx,newy,mat)){
                    q.offer(new int[]{newx,newy});
                    mat[newx][newy] = mat[x][y] + 1;
                }
            }
        }
        return mat;
    }
    
    boolean isValid(int ox,int oy,int x,int y,int[][] mat){
        if(x<0||y<0||x>=mat.length||y>=mat[0].length||mat[x][y]<=mat[ox][oy]) return false;
        else return true;
    }
}
