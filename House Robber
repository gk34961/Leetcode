class Solution {
    private Integer dp[];
    public int rob(int[] nums) {
        dp =new Integer[nums.length];
        return  robber(nums,0);
    }
private int robber(int[] nums, int index){
        if(index>=nums.length) return 0;
        if(dp[index]!=null) return dp[index];
        int robcurrebnt =nums[index]+robber(nums,index+2);
        int skipcurrent =robber(nums,index+1);
        return dp[index]=Math.max(robcurrebnt,skipcurrent);
    }
}

//Another Way

class Solution {
    public int rob(int[] nums) {
        int[] dp=new int[nums.length];
        if(nums.length==1) return nums[0];
        if(nums.length==2) return Math.max(nums[0],nums[1]);
        dp[0]=nums[0];
        dp[1]=Math.max(dp[0],nums[1]);
        
        for(int i=2;i<nums.length;i++){
           dp[i]= Math.max(nums[i]+dp[i-2],dp[i-1]);
        }
        return dp[nums.length-1];
    }

}
