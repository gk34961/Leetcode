/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> list=new ArrayList<>();
    public List<Integer> inorderTraversal(TreeNode root) {
        if(root!=null){
            inorderTraversal(root.left);
            list.add(root.val);
            inorderTraversal(root.right);   
         }
        return list;
    }
} 

//Using Iteration
class Solution {
    List<Integer> list=new ArrayList<>();
    public List<Integer> inorderTraversal(TreeNode root) {
       if(root==null) return list;
        Stack<TreeNode> nodes = new Stack<>(); 
        TreeNode temp=root;
        
        while (!nodes.isEmpty()||temp!=null) 
        { 
             if(temp!=null){
                 nodes.push(temp);
                 temp=temp.left;
             }else{
                 temp=nodes.pop();
                 list.add(temp.val);
                 temp=temp.right;
             }
        }
    return list;
    }
} 
